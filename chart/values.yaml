# Default values for docutag Helm chart
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  # Domain name for the application
  domain: docutag.local

  # Image registry (override with your registry)
  imageRegistry: ghcr.io/docutag

  # Image version/tag for all service images
  # Default: "staging" for development
  # Production: Set to specific version (e.g., "1.0.0") via Pulumi
  imageVersion: staging

  # Image pull policy
  imagePullPolicy: IfNotPresent

  # Storage class for persistent volumes
  storageClass: do-block-storage

# Override names
nameOverride: ""
fullnameOverride: ""

# Service account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Controller service configuration
controller:
  enabled: true
  replicaCount: 2

  image:
    registry: ""
    repository: docutag-controller
    tag: latest
    pullPolicy: ""

  service:
    type: ClusterIP
    port: 8080

  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  env:
    port: 8080
    scraperBaseUrl: "http://{{ .Release.Name }}-scraper:8080"
    textAnalyzerBaseUrl: "http://{{ .Release.Name }}-textanalyzer:8080"
    schedulerBaseUrl: "http://{{ .Release.Name }}-scheduler:8080"
    generateMockData: false
    corsOrigins: ""
    workerConcurrency: 10
    maxLinkDepth: 1

  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 40
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Scraper service configuration
scraper:
  enabled: true
  replicaCount: 1

  image:
    registry: ""
    repository: docutag-scraper
    tag: latest
    pullPolicy: ""

  service:
    type: ClusterIP
    port: 8080

  persistence:
    enabled: true
    size: 20Gi
    storageClass: ""
    accessMode: ReadWriteOnce

  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: "1000m"

  env:
    port: 8080
    storagePath: /app/storage
    useOllama: true
    ollamaUrl: "http://ollama:11434"
    ollamaModel: "gemma3:12b"

  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 15
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# TextAnalyzer service configuration
textanalyzer:
  enabled: true
  replicaCount: 2

  image:
    registry: ""
    repository: docutag-textanalyzer
    tag: latest
    pullPolicy: ""

  service:
    type: ClusterIP
    port: 8080

  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 8
    targetCPUUtilizationPercentage: 70

  env:
    port: 8080
    useOllama: true
    ollamaUrl: "http://ollama:11434"
    ollamaModel: "gemma3:12b"
    workerConcurrency: 5

  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 30
    timeoutSeconds: 3
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 3

# Scheduler service configuration
scheduler:
  enabled: true
  replicaCount: 1

  image:
    registry: ""
    repository: docutag-scheduler
    tag: latest
    pullPolicy: ""

  service:
    type: ClusterIP
    port: 8080

  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"

  env:
    port: 8080
    enableScheduler: true
    defaultSchedule: "0 */6 * * *"
    controllerBaseUrl: "http://{{ .Release.Name }}-controller:8080"
    scraperUrl: "http://{{ .Release.Name }}-scraper:8080"

  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 30
    timeoutSeconds: 3
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 3

# Web UI configuration
web:
  enabled: true
  replicaCount: 2

  image:
    registry: ""
    repository: docutag-web
    tag: latest
    pullPolicy: ""

  service:
    type: ClusterIP
    port: 80

  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70

  livenessProbe:
    httpGet:
      path: /
      port: 80
    initialDelaySeconds: 5
    periodSeconds: 30
    timeoutSeconds: 3
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /
      port: 80
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 3

# Redis configuration (using Bitnami chart)
redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: ""
  replica:
    replicaCount: 0

# External Redis (alternative to bundled Redis)
externalRedis:
  enabled: false
  host: ""
  port: 6379
  password: ""

# PostgreSQL configuration (using Bitnami chart)
postgresql:
  enabled: true
  architecture: standalone
  auth:
    database: docutag
    username: docutag
    password: changeme
  primary:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: ""
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

# External database (alternative to bundled PostgreSQL)
externalDatabase:
  enabled: false
  host: ""
  port: 5432
  database: docutag
  username: docutag
  password: ""

# Asynqmon (queue monitoring UI)
asynqmon:
  enabled: true
  replicaCount: 1

  image:
    registry: docker.io
    repository: hibiken/asynqmon
    tag: latest
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 8080

  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"

# Observability stack configuration
observability:
  enabled: true

  # Prometheus
  prometheus:
    enabled: true
    replicaCount: 1

    image:
      registry: docker.io
      repository: prom/prometheus
      tag: latest
      pullPolicy: IfNotPresent

    service:
      type: ClusterIP
      port: 9090

    persistence:
      enabled: true
      size: 50Gi
      storageClass: ""

    retention: 30d

    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"

  # Grafana
  grafana:
    enabled: true
    replicaCount: 1

    image:
      registry: docker.io
      repository: grafana/grafana
      tag: "11.0.0"
      pullPolicy: IfNotPresent

    service:
      type: ClusterIP
      port: 3000

    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""

    adminUser: admin
    adminPassword: admin

    env:
      authAnonymousEnabled: true
      authAnonymousOrgRole: Admin
      authDisableLoginForm: true
      usersAllowSignUp: false

    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "200m"

  # Loki
  loki:
    enabled: true
    replicaCount: 1

    image:
      registry: docker.io
      repository: grafana/loki
      tag: "3.0.0"
      pullPolicy: IfNotPresent

    service:
      type: ClusterIP
      port: 3100

    persistence:
      enabled: true
      size: 30Gi
      storageClass: ""

    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "200m"

  # Tempo
  tempo:
    enabled: true
    replicaCount: 1

    image:
      registry: docker.io
      repository: grafana/tempo
      tag: latest
      pullPolicy: IfNotPresent

    service:
      type: ClusterIP
      httpPort: 3200
      grpcPort: 4317
      otlpHttpPort: 4318

    persistence:
      enabled: true
      size: 20Gi
      storageClass: ""

    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "200m"

  # Promtail (log collector for Loki)
  promtail:
    enabled: true

    image:
      registry: docker.io
      repository: grafana/promtail
      tag: "3.0.0"
      pullPolicy: IfNotPresent

    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"

# Ingress configuration for Traefik
ingress:
  enabled: true
  className: traefik

  # TLS configuration
  tls:
    enabled: true
    certResolver: letsencrypt
    secretName: docutag-tls

  # Annotations for Traefik
  annotations: {}

  # Routes configuration
  routes:
    web:
      enabled: true
      host: "{{ .Values.global.domain }}"
      path: /
      pathType: Prefix
      service: web
      port: 80

    api:
      enabled: true
      host: "{{ .Values.global.domain }}"
      path: /api
      pathType: Prefix
      service: controller
      port: 8080
      middlewares: []

    grafana:
      enabled: true
      host: "{{ .Values.global.domain }}"
      path: /grafana
      pathType: Prefix
      service: grafana
      port: 3000

    asynqmon:
      enabled: true
      host: "{{ .Values.global.domain }}"
      path: /asynqmon
      pathType: Prefix
      service: asynqmon
      port: 8080

# Pod security context
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}
